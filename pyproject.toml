[tool.poetry]
name = "smart-app-framework"
version = "0.0.0"
description = "Python-фреймворк, который позволяет создавать смартапы для виртуальных ассистентов Салют."
authors = ["Salute Developers <developer@sberdevices.ru>"]
readme = "README.md"
packages = [
    {include = "core"},
    {include = "scenarios"},
    {include = "smart_kit"},
]
classifiers = [
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux"
]


[tool.poetry.dependencies]
python = ">=3.8.1,<3.12"
aiohttp = "3.8.4"
boto = "2.49.0"
cachetools = "5.3.0"
confluent_kafka = [
    {version="1.9.2", python = "<3.11"},
    {version="2.0.2", python = "3.11.*"},
]
croniter = "1.3.7"
dill = "0.3.6"
ics = "0.6"
Jinja2 = "3.0.3"
keras = {version = "2.12.0", optional = true}
nltk = "3.5"
numpy = "1.23.5"
objgraph = "3.4.1"
prometheus-client = "0.11.0"
psutil = "5.8.0"
pyignite = "0.5.2"
pymorphy2 = "0.8"
pymorphy2_dicts = "2.4.393442.3710985"
python-dateutil = "2.7.3"
python-json-logger = "0.1.11"
PyYAML = "5.3"
requests = "2.22.0"
rusenttokenize = "0.0.5"
scikit-learn = [
    {version = "1.1.2", python = "<3.11", optional = true},
    {version = "1.2.0", python = "3.11.*", optional = true},
]
setuptools = "62.3.2"
tabulate = "0.9.0"
tensorflow = [
    {version = "2.12.0", markers = "sys_platform == 'darwin' and platform_machine == 'x86_64'", optional = true},
    {version = "2.12.0", markers = "sys_platform == 'linux' and platform_machine == 'x86_64'", optional = true},
]
tensorflow-macos = {version = "2.12.0", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'", optional = true}
tensorflow-aarch64 = {version = "2.12.0", markers = "sys_platform == 'linux' and platform_machine == 'aarch64'", optional = true}
timeout-decorator = "0.4.1"
tqdm = "4.64.1"
incremental = "21.3.0"
freezegun = "1.1.0"
protobuf = "3.20.3"
lxml = "4.9.2"
twisted = "22.10.0"

[tool.poetry.extras]
ml = ["keras", "scikit-learn", "tensorflow", "tensorflow-macos", "tensorflow-aarch64"]

[tool.poetry.group.dev.dependencies]
flake8 = "6.0.0"
taskipy = "1.10.3"
black = "22.12.0"

[tool.taskipy.tasks]
lint = "flake8 . --max-line-length=120 --ignore W504,W605,F401 --exclude=smart_kit/utils/SmartAppToMessage_pb2.py"
unit_test = "python -m unittest discover -b -v -s tests"
runapp_http_test = """python -m smart_kit create_app http_test_app &&
                      cd http_test_app &&
                      PYTHONPATH=".." timeout 10 python manage.py run_app || code=$?;
                      if [ $code -ne 124 ] && [ $code -ne 0 ]; then exit $code; fi"""
runapp_kafka_test = """docker-compose -f .github/docker-compose.yml up -d &&
                       python -m smart_kit create_app kafka_test_app &&
                       cp .github/kafka_config.yml kafka_test_app/static/configs/kafka_config.yml &&
                       cp .github/logging_config.yml kafka_test_app/static/configs/logging_config.yml &&
                       cd kafka_test_app &&
                       echo 'from smart_kit.start_points.main_loop_kafka import MainLoop' >> app_config.py &&
                       echo 'MAIN_LOOP = MainLoop' >> app_config.py &&
                       sleep 5 &&
                       docker-compose -f ../.github/docker-compose.yml exec -T kafka kafka-topics.sh --create --bootstrap-server localhost:9092 --partitions 3 --topic toTestApp &&
                       PYTHONPATH=".." timeout 60 python manage.py run_app || code=$?;
                       if [ $code -ne 124 ] && [ $code -ne 0 ]; then exit $code; fi"""

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
