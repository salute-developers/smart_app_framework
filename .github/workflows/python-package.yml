# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        os-version: ['ubuntu-20.04']
        python-version: ['3.8', '3.9']

    runs-on: ${{ matrix.os-version }}
    name: unittests with py-${{ matrix.python-version }} on ${{ matrix.os-version }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        uname -a
        python -m pip install --upgrade pip
        python -m pip install flake8 
        python -m pip install .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        python -m unittest discover -s tests -v
    - name: Test run_app on HttpMainLoop
      run: |
        python -m smart_kit create_app http_test_app
        cd http_test_app
        timeout 10 python manage.py run_app || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
        cd ..
    - name: Test run_app on KafkaMainLoop
      run: |
        docker-compose -f .github/docker-compose.yml up -d
        python -m smart_kit create_app kafka_test_app
        cp .github/kafka_config.yml kafka_test_app/static/configs/kafka_config.yml
        cp .github/logging_config.yml kafka_test_app/static/configs/logging_config.yml
        cd kafka_test_app
        echo 'from smart_kit.start_points.main_loop_kafka import MainLoop' >> app_config.py
        echo 'MAIN_LOOP = MainLoop' >> app_config.py
        docker-compose -f ../.github/docker-compose.yml exec -T kafka kafka-topics.sh --create --bootstrap-server localhost:9092  --partitions 3 --topic toTestApp
        timeout 10 python manage.py run_app || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
        cd ..
